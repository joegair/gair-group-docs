
general:

   - key: input
     descript: >
       Specify the atomic input coordinate file as a *string*
   
   - key: input_ensemble
     descript: >
       Specify an ensemble input file as a *string*

   - key: threads
     descript: >
       Specify the number of CPU threads to be used as an *integer*

   - comm: "`bin`, `binary`"
     descript: >
       Specify a `xtb` binary as a *string*. Used for *legacy* runtypes of CREST. 
       For new integrations use the `binary` option within the `[calculation.level]` block.

   - key: runtype
     descript: >
       Select the CREST runtype, specify as as *string*.<br> 
       The possible values are:
     vals:
       - "`none` - do nothing"
       - "`ancopt`,`optimize` - optimize the input structure"
       - "`ancopt_ensemble`,`optimize_ensemble` - optimize the input ensemble, 
          similar to the `--mdopt` function."
       - "`md`,`mtd`,`dynamics`,`metadynamics` - perform a (meta)dynamics simulation."
       - "`mecp`,`mecp_search` - MECP search algorithm"

   - key: preopt
     descript: >
       Activate/Deactivate pre-optimization.<br> 
       Specify as *boolean* (`true`/`false`)

   - key: topo
     descript: >
       Activate/Deactivate topology checks.<br>
       Specify as *boolean* (`true`/`false`)


calculation:

   - key: type
     descript: >
       Instruction on how to process energies and gradients. 
       Can be specified as *string* or *integer*.
       Possible values are:
     vals:
       - "*any integer > 0* - Select the respective `[[calculation.level]]` block 
          ([see below <i class='fa-solid fa-circle-down'></i>](#calculationlevel-sub-blocks)) 
          to be used (if multiple have been defined). By default the first one is taken."
       - "`mecp` - Take the *first two* specified levels and average energy and gradients."

   - key: elog
     descript: >
       Specify a file as a *string* to which energies are logged, e.g., in each optimization step. 

   - key: eprint
     descript: >
       Activate/Deactivate the energy printout via `elog`.<br>
       Specify as *boolean* (`true`/`false`)

   - key: hess_update
     descript: >
       Select the Hessian update method for ANCOPT as a *string*. 
       Note, that for regular optimizations with ANCOPT only BFGS works well.
     vals:
       - "`bfgs` - Use the default BFGS update"
       - "`powell` - Use the Powell update method"
       - "`sr1` - Use the symmetric rank one (SR1) update method"
       - "`bofill` - Use the Bofill type update"
       - "`schlegel` - Use the Farkas-Schlegel type update"
     

calclevel:

   - key: method
     descript: >
       Specify the method or type of theory to be used in this calculation as a *string*.
       This will instruct CREST on the format of energies and gradients that shall be read.
       Possible values are:
     vals:
       - "`xtb`,`gfn`,`gfn-xtb` - Select GFN*n*-xTB method calculations 
          performed via the `xtb` program"
       - "`generic` - Call a generic script. The script should process the coordinates that
          crest writes into a file `genericinp.xyz` and you must know how to obtain the gradient
          (see options `gradtype` and `gradfile` below)`"

   - comm: "`bin`, `binary`"
     descript: >
       Select the program/binary/script name to be executed by CREST in order to generate 
       energies and gradients. Can be a full path. Specify as a *string*.

   - key: flags
     descript: >
       Specify any arguments that are passed to the selected binary as a *string*.
       This must exclude arguments generated by CREST, such as the molecular charge 
       for `xtb` calculations.
       Be careful not to abuse this option!

   - comm: "`dir`, `calcspace`"
     descript: >
       Specify the directory in which CREST shall perform this calculation as a *string*.
       Note, this is can be a *relative* OR *absolute* path to the directory.

   - comm: "`chrg`, `charge`"
     descript: >
       Specify the molecular charge as an *integer*.

   - key: uhf
     descript: >
       Specify multiplicity information as an *integer*. For `xtb` calculations
       this number must be Δ*n* = *N*<sub>α</sub> - *N*<sub>β</sub> electrons.

   - key: rdwbo
     descript: >
       Activate/Deactivate reading of bond orders for each singlepoint at the chosen level.
       Specify as *boolean* (`true`/`false`)
  
   - key: rddip
     descript: >
       Activate/Deactivate reading of molecular dipole moments for each singlepoint 
       at the chosen level. Specify as *boolean* (`true`/`false`)

   - key: dipgrad
     descript: >
       Activate/Deactivate reading of the Cartesian gradient of the molecular dipole moments 
       for each singlepoint at the chosen level. Specify as *boolean* (`true`/`false`)

   - key: gradfile
     descript: >
       Name the file from which each singlepoint in the `generic` method interface
       obtains the energy and gradient information. Specify as *string*

   - key: gradtype
     descript: >
       Name the gradient file *format* for each singlepoint in the `generic` method interface.
       Specify as *string*. Available options are:
     vals:
       - "`engrad` - the *.engrad* format used by e.g. xtb and ORCA."



constraints:

   - comm: "`bond`, `bonds`"
     descript: >
       Introduce automatic bond constraints either as a *string* keyword, 
       or with a mixed-type *list*.
       Available values are:
     vals:
       - "`all` - put a constraint on all (automatically identified) bonds"       

   - key: sphere
     descript: >
       Define a spherical wall potential around the system. The argument is a *list of reals*
       of the format `[ a, b, c]`, where *a* is the potential prefactor, *b* is the exponent,
       and *c* is the radius (in atomic units, *i.e.*, Bohr).

   - key: sphere_logfermi
     descript: >
       Define a spherical logfermi-type wall potential around the system. 
       The argument is a *list of reals* of the format `[ a, b, c]`, where *a* is the 
       logfermi temperature in K, *b* is the exponent factor, and *c* is the sphere radius 
       (in atomic units, *i.e.*, Bohr).

   - key: gapfiff
     descript: >
       Introduce a simple constraint to the gap between two potentials 
       (`[[calculation.level]]` objects) in the MECP mode. The argument is a *list of reals*
       of the format `[ σ, α]`, where *σ* is a potential prefactor and *α* is a 
       confinement parameter.

   - comm: "`mecp`, `gapfiff2`"
     descript: >
       Introduce a modified constraint to the gap between two potentials 
       (`[[calculation.level]]` objects) in the MECP mode. The argument is a *list of reals*
       of the format `[ σ, α, c]`, where *σ* is a potential prefactor, *α* is a
       confinement parameter, and *c* is a shift in the exponential scaling function.



dynamics:

   - key: length
     descript: >
       Set the simulation length in **ps**. The argument is specified as a *real*.

   - key: tstep
     descript: >
       Set the time step in **fs**. The argument is specified as a *real*.

   - key: dump
     descript: >
       Set the trajectory snapshot dump frequency in **fs**. The argument is specified as a *real*.

   - key: hmass
     descript: >
       Set the hydrogen mass in **amu**. The argument is specified as a *real*.
       Increasing the hydrogen mass helps the simulation to run more stable.



metadynamics:

   - key: type
     descript: >
       Set the metadynamics type with regards to the employed collective variable.
       Specify the argument as a *string*. Available types are:
     vals:
       - "`rmsd` - Use the Cartesian RMSD between the snapshot and a reference structure
          list as collective variables."

   - key: alpha
     descript: >
       Set the exponent of the Gaussian metadynamics potential. Specify as a *real*.

   - key: kpush
     descript: >
       Set the Gaussian metadynamics potential prefactor in *E*<sub>h</sub>. Specify as a *real*.

   - comm: "`dump`,`dump_fs`,<br>`dump_ps`"
     descript: >
       Specify the reference structure dump frequency for RMSD-based metadynamics 
       in **fs** (or **ps** for `dump_ps`) as a *real*.
